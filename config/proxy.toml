##################################################
#                                                #
#                  Codis-Proxy                   #
#                                                #
##################################################

# Set runtime.GOMAXPROCS to N, default is 1.
ncpu = 1

# Set path/name of daliy rotated log file.
log = "proxy.log"

# Expire-log-days,  0 means never expire
expire_log_days = 30

# Set the log-level, should be INFO,WARN,DEBUG or ERROR, default is INFO.
log_level = "info"

# Set pidfile
pidfile = "proxy.pid"

# Set Codis Product Name/Auth.
product_name = "codis-demo"
product_auth = ""

# Set auth for client session
#   1. product_auth is used for auth validation among codis-dashboard,
#      codis-proxy and codis-server.
#   2. session_auth is different from product_auth, it requires clients
#      to issue AUTH <PASSWORD> before processing any other commands.
session_auth = ""

# Set bind address for admin(rpc), tcp only.
admin_addr = "0.0.0.0:11080"

# Set bind address for proxy, proto_type can be "tcp", "tcp4", "tcp6", "unix" or "unixpacket".
proto_type = "tcp4"
proxy_addr = "0.0.0.0:19000"

# Set jodis address & session timeout
#   1. jodis_name is short for jodis_coordinator_name, only accept "zookeeper" & "etcd".
#   2. jodis_addr is short for jodis_coordinator_addr
#   3. jodis_auth is short for jodis_coordinator_auth, for zookeeper/etcd, "user:password" is accepted.
#   4. proxy will be registered as node:
#        if jodis_compatible = true (not suggested):
#          /zk/codis/db_{PRODUCT_NAME}/proxy/{HASHID} (compatible with Codis2.0)
#          /zk/codis/db_{PRODUCT_NAME}/proxy/{jodis_proxy_subdir}/{HASHID} (compatible with Codis2.0)
#        or else
#          /jodis/{PRODUCT_NAME}/proxy-{HASHID}
#          /jodis/{PRODUCT_NAME}/{jodis_proxy_subdir}/proxy-{HASHID}
jodis_name = "zookeeper"
jodis_addr = ""
jodis_auth = ""
jodis_timeout = "20s"
jodis_compatible = true
jodis_proxy_subdir = ""

# Set datacenter of proxy.
proxy_datacenter = ""

# Set max number of alive sessions.
proxy_max_clients = 50000

# Set max offheap memory size. (0 to disable)
proxy_max_offheap_size = "1024mb"

# Set heap placeholder to reduce GC frequency.
proxy_heap_placeholder = "256mb"

# Proxy will refresh state in a predefined interval. (0 to disable)
proxy_refresh_state_period = "1s"

# Proxy will ping backend redis (and clear 'MASTERDOWN' state) in a predefined interval. (0 to disable)
backend_ping_period = "5s"

# Set backend recv buffer size & timeout.
backend_recv_bufsize = "128kb"
backend_recv_timeout = "3s"

# Set backend send buffer & timeout.
backend_send_bufsize = "128kb"
backend_send_timeout = "3s"

# Set backend pipeline buffer size.
backend_max_pipeline = 20480

# Set backend never read replica groups, default is true
backend_primary_only = true

# Set backend parallel connections per server
backend_primary_parallel = 8
backend_primary_quick = 0
backend_replica_parallel = 8
backend_replica_quick = 0

# Set backend tcp keepalive period. (0 to disable)
backend_keepalive_period = "75s"

# Set number of databases of backend.
backend_number_databases = 1

# If there is no request from client for a long time, the connection will be closed. (0 to disable)
# Set session recv buffer size & timeout.
session_recv_bufsize = "128kb"
session_recv_timeout = "30m"

# Set session send buffer size & timeout.
session_send_bufsize = "64kb"
session_send_timeout = "30s"

# Make sure this is higher than the max number of requests for each pipeline request, or your client may be blocked.
# Set session pipeline buffer size.
session_max_pipeline = 10000

# Set session tcp keepalive period. (0 to disable)
session_keepalive_period = "75s"

# Set session to be sensitive to failures. Default is false, instead of closing socket, proxy will send an error response to client.
session_break_on_failure = false

# Slowlog-log-slower-than(us), from receive command to send response, 0 is allways print slow log
slowlog_log_slower_than = 100000
# set the number of slowlog in memory, max len is 10000000. (0 to disable)
slowlog_max_len = 128000
# quick command list
quick_cmd_list = ""
# slow command list
slow_cmd_list = ""
# auto set slow flag for command, when command timeout
auto_set_slow_flag = false

# monitor big key big value
# max length of single value
monitor_max_value_len = 4096
# max batchsize of single request or response from redis client
monitor_max_batchsize = 200
# when writing the record into xmonitor log, max length of cmd info
monitor_max_cmd_info = 256
# set the number of xmonitor log in memory, max length is 100000, about 8GB
monitor_log_max_len = 10000
# set the limitation of result set for xmonitor log
monitor_result_set_size = 20
# switch for xmonitorï¼Œ0 is disabled, 1 is enabled
monitor_enabled = 0

# breaker
# switch for breaker, 0 is disabled, 1 is enabled
breaker_enabled = 0
# default probability of degradation if degrade service with probability
breaker_degradation_probability = 0
# limitation of qps of cmd executed, if equals nagative or 0, means no limitation
breaker_qps_limitation = 0

# cmd white list
breaker_cmd_white_list = ""
# cmd black list
breaker_cmd_black_list = ""
# key white list
breaker_key_white_list = ""
# key black list
breaker_key_black_list = ""